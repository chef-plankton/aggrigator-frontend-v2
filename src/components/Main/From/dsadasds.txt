async function main() {
  const [deployer, alice] = await ethers.getSigners();

  const { akkaAggrigator, akkaAggrigatorReceive, strgateRouter } = mainnet;

  const akkaAggrigatorContract = await ethers.getContractAt(
    "AkkaAggrigator",
    akkaAggrigator
  );

  const gasForCall = BigNumber.from("2105617");

  const payload = await akkaAggrigatorContract.encodeSwapDescription(
    {
      srcToken: "0x04068DA6C83AFCFA0e13ba15A6696662335D5B75",
      dstToken: "0x04068DA6C83AFCFA0e13ba15A6696662335D5B75",
      srcDesiredAmount: parseUnits("0.4995", 6),
      dstDesiredMinAmount: parseUnits("0.0", 18),
      to: deployer.address,
      dstChainId: 0,
      dstPoolId: 0,
      srcPoolId: 0,
      gasForSwap: gasForCall,
      dstContractAddress: "0xe953499d2Ba1f7428ab61F887c34A099e316b050",
      isRegularTransfer: true,
      routes: [],
    },
    {
      // gasLimit: 210000,
    }
  );
  // const payload = new AbiCoder().encode([], []);
  // console.log(payload);

  const fee = await akkaAggrigatorContract.quoteLayerZeroFee(
    strgateRouter,
    12,
    deployer.address,
    payload,
    gasForCall
  );

  console.log("fee: ", fee, fee.toString());

  akkaAggrigatorContract
    .connect(deployer)
    .aggrigatorSwap(
      {
        srcToken: "0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83",
        dstToken: "0x04068DA6C83AFCFA0e13ba15A6696662335D5B75",
        srcDesiredAmount: parseUnits("1", 18),
        dstDesiredMinAmount: parseUnits("0.125", 6),
        to: deployer.address,
        dstChainId: 2,
        dstPoolId: 2,
        srcPoolId: 1,
        gasForSwap: gasForCall,
        dstContractAddress: "0x0191C2F76327fc4b24D25441ef621c8509222238",
        isRegularTransfer: true,
        routes: [
          {
            srcToken: "0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83",
            dstToken: "0x04068DA6C83AFCFA0e13ba15A6696662335D5B75",
            srcAmount: parseUnits("3.18", 18),
            dstMinAmount: parseUnits("0.4035", 6),
            swapType: 1,
            path: [
              "0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83",
              "0x04068DA6C83AFCFA0e13ba15A6696662335D5B75",
            ],
            router: "0x5023882f4D1EC10544FCB2066abE9C1645E95AA0",
          },
          {
            srcToken: "0x04068DA6C83AFCFA0e13ba15A6696662335D5B75",
            dstToken: "0x55d398326f99059fF775485246999027B3197955",
            srcAmount: parseUnits("0.4035", 6),
            dstMinAmount: parseUnits("0.139", 18),
            swapType: 1,
            path: [
              "0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83",
              "0xb3654dc3D10Ea7645f8319668E8F54d2574FBdC8",
            ],
            router: "0xAf5191B0De278C7286d6C7CC6ab6BB8A73bA2Cd6",
          },
        ],
      },
      payload,
      {
        gasLimit: 500000,
        value: fee[0],
      }
    )
    .then((data: ContractTransaction) => {
      console.log("hash: ", data.hash);
    });
  akkaAggrigatorContract.on("SwapConfirmationDetails", (...data) => {
    console.log("Swap has been performed on First Chain:", ...data);
  });
}
